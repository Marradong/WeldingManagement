//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//     Produced by Entity Framework Visual Editor v4.1.2.0
//     Source:                    https://github.com/msawczyn/EFDesigner
//     Visual Studio Marketplace: https://marketplace.visualstudio.com/items?itemName=michaelsawczyn.EFDesigner
//     Documentation:             https://msawczyn.github.io/EFDesigner/
//     License (MIT):             https://github.com/msawczyn/EFDesigner/blob/master/LICENSE
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Data.Entity.Infrastructure.Annotations;

namespace Welding.DAL
{
   /// <inheritdoc/>
   public partial class EFWeldingManagement : DbContext
   {
      #region DbSets
      public virtual System.Data.Entity.DbSet<global::Welding.DAL.Attachment> Attachments { get; set; }
      public virtual System.Data.Entity.DbSet<global::Welding.DAL.Consumable> Consumables { get; set; }
      public virtual System.Data.Entity.DbSet<global::Welding.DAL.Current_Qualification> Current_Qualification { get; set; }
      public virtual System.Data.Entity.DbSet<global::Welding.DAL.Datasheet> Datasheets { get; set; }
      public virtual System.Data.Entity.DbSet<global::Welding.DAL.Datasheet_Run> Datasheet_Run { get; set; }
      public virtual System.Data.Entity.DbSet<global::Welding.DAL.Job> Jobs { get; set; }
      public virtual System.Data.Entity.DbSet<global::Welding.DAL.NDT_Record> NDT_Record { get; set; }
      public virtual System.Data.Entity.DbSet<global::Welding.DAL.Person> People { get; set; }
      public virtual System.Data.Entity.DbSet<global::Welding.DAL.Visual_Inspection> Visual_Inspection { get; set; }
      public virtual System.Data.Entity.DbSet<global::Welding.DAL.Welder_Qualification> Welder_Qualification { get; set; }
      public virtual System.Data.Entity.DbSet<global::Welding.DAL.WPQR> WPQRs { get; set; }
      public virtual System.Data.Entity.DbSet<global::Welding.DAL.WPQR_Run> WPQR_Run { get; set; }
      public virtual System.Data.Entity.DbSet<global::Welding.DAL.WPS> WPS { get; set; }
      public virtual System.Data.Entity.DbSet<global::Welding.DAL.WPS_Request> WPS_Request { get; set; }
      public virtual System.Data.Entity.DbSet<global::Welding.DAL.WPS_Run> WPS_Run { get; set; }
      #endregion DbSets

      #region Constructors

      partial void CustomInit();

      #warning Default constructor not generated for EFWeldingManagement since no default connection string was specified in the model

      /// <inheritdoc />
      public EFWeldingManagement(string connectionString) : base(connectionString)
      {
         Configuration.LazyLoadingEnabled = true;
         Configuration.ProxyCreationEnabled = true;
         System.Data.Entity.Database.SetInitializer<EFWeldingManagement>(new EFWeldingManagementDatabaseInitializer());
         CustomInit();
      }

      /// <inheritdoc />
      public EFWeldingManagement(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model) : base(connectionString, model)
      {
         Configuration.LazyLoadingEnabled = true;
         Configuration.ProxyCreationEnabled = true;
         System.Data.Entity.Database.SetInitializer<EFWeldingManagement>(new EFWeldingManagementDatabaseInitializer());
         CustomInit();
      }

      /// <inheritdoc />
      public EFWeldingManagement(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection) : base(existingConnection, contextOwnsConnection)
      {
         Configuration.LazyLoadingEnabled = true;
         Configuration.ProxyCreationEnabled = true;
         System.Data.Entity.Database.SetInitializer<EFWeldingManagement>(new EFWeldingManagementDatabaseInitializer());
         CustomInit();
      }

      /// <inheritdoc />
      public EFWeldingManagement(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection) : base(existingConnection, model, contextOwnsConnection)
      {
         Configuration.LazyLoadingEnabled = true;
         Configuration.ProxyCreationEnabled = true;
         System.Data.Entity.Database.SetInitializer<EFWeldingManagement>(new EFWeldingManagementDatabaseInitializer());
         CustomInit();
      }

      /// <inheritdoc />
      public EFWeldingManagement(System.Data.Entity.Infrastructure.DbCompiledModel model) : base(model)
      {
         Configuration.LazyLoadingEnabled = true;
         Configuration.ProxyCreationEnabled = true;
         System.Data.Entity.Database.SetInitializer<EFWeldingManagement>(new EFWeldingManagementDatabaseInitializer());
         CustomInit();
      }

      /// <inheritdoc />
      public EFWeldingManagement(System.Data.Entity.Core.Objects.ObjectContext objectContext, bool dbContextOwnsObjectContext) : base(objectContext, dbContextOwnsObjectContext)
      {
         Configuration.LazyLoadingEnabled = true;
         Configuration.ProxyCreationEnabled = true;
         System.Data.Entity.Database.SetInitializer<EFWeldingManagement>(new EFWeldingManagementDatabaseInitializer());
         CustomInit();
      }

      #endregion Constructors

      partial void OnModelCreatingImpl(System.Data.Entity.DbModelBuilder modelBuilder);
      partial void OnModelCreatedImpl(System.Data.Entity.DbModelBuilder modelBuilder);

      /// <inheritdoc />
      protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
      {
         base.OnModelCreating(modelBuilder);
         OnModelCreatingImpl(modelBuilder);

         modelBuilder.HasDefaultSchema("dbo");

         modelBuilder.Entity<global::Welding.DAL.Attachment>()
                     .ToTable("Attachments")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Welding.DAL.Attachment>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
         modelBuilder.Entity<global::Welding.DAL.Attachment>()
                     .HasRequired(x => x.Datasheet)
                     .WithMany(x => x.Attachments)
                     .Map(x => x.MapKey("DatasheetId"));
         modelBuilder.Entity<global::Welding.DAL.Attachment>()
                     .HasRequired(x => x.WPQR)
                     .WithMany(x => x.Attachments)
                     .Map(x => x.MapKey("WPQRId"));
         modelBuilder.Entity<global::Welding.DAL.Attachment>()
                     .HasRequired(x => x.WPS)
                     .WithMany(x => x.Attachments)
                     .Map(x => x.MapKey("WPSId"));
         modelBuilder.Entity<global::Welding.DAL.Attachment>()
                     .HasRequired(x => x.Consumable)
                     .WithMany(x => x.Attachments)
                     .Map(x => x.MapKey("ConsumableId"));

         modelBuilder.Entity<global::Welding.DAL.Consumable>()
                     .ToTable("Consumables")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Welding.DAL.Consumable>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);

         modelBuilder.Entity<global::Welding.DAL.Current_Qualification>()
                     .ToTable("Current_Qualification")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Welding.DAL.Current_Qualification>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
         modelBuilder.Entity<global::Welding.DAL.Current_Qualification>()
                     .HasRequired(x => x.Person)
                     .WithMany(x => x.Current_Qualification)
                     .Map(x => x.MapKey("PersonId"));

         modelBuilder.Entity<global::Welding.DAL.Datasheet>()
                     .ToTable("Datasheets")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Welding.DAL.Datasheet>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
         modelBuilder.Entity<global::Welding.DAL.Datasheet>()
                     .HasRequired(x => x.Welder_Qualification)
                     .WithMany(x => x.Datasheets)
                     .Map(x => x.MapKey("Welder_QualificationId"));
         modelBuilder.Entity<global::Welding.DAL.Datasheet>()
                     .HasRequired(x => x.Consumable)
                     .WithMany(x => x.Datasheets)
                     .Map(x => x.MapKey("ConsumableId"));
         modelBuilder.Entity<global::Welding.DAL.Datasheet>()
                     .HasRequired(x => x.Job)
                     .WithMany(x => x.Datasheets)
                     .Map(x => x.MapKey("JobId"));
         modelBuilder.Entity<global::Welding.DAL.Datasheet>()
                     .HasRequired(x => x.Person)
                     .WithMany(x => x.Datasheets)
                     .Map(x => x.MapKey("PersonId"));

         modelBuilder.Entity<global::Welding.DAL.Datasheet_Run>()
                     .ToTable("Datasheet_Run")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Welding.DAL.Datasheet_Run>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
         modelBuilder.Entity<global::Welding.DAL.Datasheet_Run>()
                     .HasRequired(x => x.Datasheet)
                     .WithMany(x => x.Datasheet_Run)
                     .Map(x => x.MapKey("DatasheetId"));

         modelBuilder.Entity<global::Welding.DAL.Job>()
                     .ToTable("Jobs")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Welding.DAL.Job>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
         modelBuilder.Entity<global::Welding.DAL.Job>()
                     .HasRequired(x => x.Visual_Inspection)
                     .WithMany(x => x.Jobs)
                     .Map(x => x.MapKey("Visual_InspectionId"));

         modelBuilder.Entity<global::Welding.DAL.NDT_Record>()
                     .ToTable("NDT_Record")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Welding.DAL.NDT_Record>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
         modelBuilder.Entity<global::Welding.DAL.NDT_Record>()
                     .HasRequired(x => x.Current_Qualification)
                     .WithMany(x => x.NDT_Record)
                     .Map(x => x.MapKey("Current_QualificationId"));

         modelBuilder.Entity<global::Welding.DAL.Person>()
                     .ToTable("People")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Welding.DAL.Person>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);

         modelBuilder.Entity<global::Welding.DAL.Visual_Inspection>()
                     .ToTable("Visual_Inspection")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Welding.DAL.Visual_Inspection>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);

         modelBuilder.Entity<global::Welding.DAL.Welder_Qualification>()
                     .ToTable("Welder_Qualification")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Welding.DAL.Welder_Qualification>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
         modelBuilder.Entity<global::Welding.DAL.Welder_Qualification>()
                     .HasRequired(x => x.Visual_Inspection)
                     .WithMany(x => x.Welder_Qualification)
                     .Map(x => x.MapKey("Visual_InspectionId"));
         modelBuilder.Entity<global::Welding.DAL.Welder_Qualification>()
                     .HasRequired(x => x.Current_Qualification)
                     .WithMany(x => x.Welder_Qualification)
                     .Map(x => x.MapKey("Current_QualificationId"));
         modelBuilder.Entity<global::Welding.DAL.Welder_Qualification>()
                     .HasRequired(x => x.Attachment)
                     .WithMany(x => x.Welder_Qualification)
                     .Map(x => x.MapKey("AttachmentId"));

         modelBuilder.Entity<global::Welding.DAL.WPQR>()
                     .ToTable("WPQRs")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Welding.DAL.WPQR>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
         modelBuilder.Entity<global::Welding.DAL.WPQR>()
                     .HasRequired(x => x.Welder_Qualification)
                     .WithMany(x => x.WPQRs)
                     .Map(x => x.MapKey("Welder_QualificationId"));
         modelBuilder.Entity<global::Welding.DAL.WPQR>()
                     .HasRequired(x => x.Person)
                     .WithMany(x => x.WPQRs)
                     .Map(x => x.MapKey("PersonId"));

         modelBuilder.Entity<global::Welding.DAL.WPQR_Run>()
                     .ToTable("WPQR_Run")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Welding.DAL.WPQR_Run>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
         modelBuilder.Entity<global::Welding.DAL.WPQR_Run>()
                     .HasRequired(x => x.WPQR)
                     .WithMany(x => x.WPQR_Run)
                     .Map(x => x.MapKey("WPQRId"));

         modelBuilder.Entity<global::Welding.DAL.WPS>()
                     .ToTable("WPS")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Welding.DAL.WPS>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
         modelBuilder.Entity<global::Welding.DAL.WPS>()
                     .HasRequired(x => x.WPQR)
                     .WithMany(x => x.WPS)
                     .Map(x => x.MapKey("WPQRId"));
         modelBuilder.Entity<global::Welding.DAL.WPS>()
                     .HasRequired(x => x.WPS_Request)
                     .WithMany(x => x.WPS)
                     .Map(x => x.MapKey("WPS_RequestId"));
         modelBuilder.Entity<global::Welding.DAL.WPS>()
                     .HasRequired(x => x.Job)
                     .WithMany(x => x.WPS)
                     .Map(x => x.MapKey("JobId"));
         modelBuilder.Entity<global::Welding.DAL.WPS>()
                     .HasRequired(x => x.Person)
                     .WithMany(x => x.WPS)
                     .Map(x => x.MapKey("PersonId"));

         modelBuilder.Entity<global::Welding.DAL.WPS_Request>()
                     .ToTable("WPS_Request")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Welding.DAL.WPS_Request>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);

         modelBuilder.Entity<global::Welding.DAL.WPS_Run>()
                     .ToTable("WPS_Run")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Welding.DAL.WPS_Run>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
         modelBuilder.Entity<global::Welding.DAL.WPS_Run>()
                     .HasRequired(x => x.WPS)
                     .WithMany(x => x.WPS_Run)
                     .Map(x => x.MapKey("WPSId"));

         OnModelCreatedImpl(modelBuilder);
      }
   }
}
